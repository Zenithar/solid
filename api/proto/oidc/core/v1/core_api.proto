// Licensed to SolID under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. SolID licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

package oidc.core.v1;

option go_package = "oidc/core/v1;corev1";

import "oidc/core/v1/core.proto";
import "oidc/core/v1/error.proto";
import "oidc/core/v1/client.proto";
import "oidc/core/v1/token.proto";
import "google/protobuf/wrappers.proto";

// -----------------------------------------------------------------------------

service AuthorizationAPI {
  rpc Authorize (AuthorizationRequest) returns (AuthorizationResponse);
  rpc Token (TokenRequest) returns (TokenResponse);
}

// -----------------------------------------------------------------------------

// An Authentication Request is an OAuth 2.0 Authorization Request that requests
// that the End-User be authenticated by the Authorization Server.
message AuthorizationRequest {
  // REQUIRED. OpenID Connect requests MUST contain the openid scope value. If
  // the openid scope value is not present, the behavior is entirely unspecified.
  // Other scope values MAY be present. Scope values used that are not understood
  // by an implementation SHOULD be ignored.
  string scope = 1;

  // REQUIRED. OAuth 2.0 Response Type value that determines the authorization
  // processing flow to be used, including what parameters are returned from
  // the endpoints used. When using the Authorization Code Flow, this value is
  // code.
  string response_type = 2;

  // REQUIRED. OAuth 2.0 Client Identifier valid at the Authorization Server.
  string client_id = 3;

  // REQUIRED. Redirection URI to which the response will be sent. This URI
  // MUST exactly match one of the Redirection URI values for the Client
  // pre-registered at the OpenID Provider, with the matching performed as
  // described in Section 6.2.1 of [RFC3986] (Simple String Comparison).
  // When using this flow, the Redirection URI SHOULD use the https scheme;
  // however, it MAY use the http scheme, provided that the Client Type is
  // confidential, as defined in Section 2.1 of OAuth 2.0, and provided the OP
  // allows the use of http Redirection URIs in this case. The Redirection URI
  // MAY use an alternate scheme, such as one that is intended to identify a
  // callback into a native application.
  string redirect_uri = 4;

  // RECOMMENDED. Opaque value used to maintain state between the request and
  // the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation
  // is done by cryptographically binding the value of this parameter with a
  // browser cookie.
  string state = 5;

  // OPTIONAL. Informs the Authorization Server of the mechanism to be used for
  // returning parameters from the Authorization Endpoint. This use of this
  // parameter is NOT RECOMMENDED when the Response Mode that would be requested
  // is the default mode specified for the Response Type.
  google.protobuf.StringValue response_mode = 6;

  // OPTIONAL. String value used to associate a Client session with an ID Token,
  // and to mitigate replay attacks. The value is passed through unmodified from
  // the Authentication Request to the ID Token. Sufficient entropy MUST be
  // present in the nonce values used to prevent attackers from guessing values.
  // https://tools.ietf.org/html/draft-ietf-oauth-security-topics-15#section-4.5.3
  string nonce = 7;

  // OPTIONAL. ASCII string value that specifies how the Authorization Server
  // displays the authentication and consent user interface pages to the End-User.
  google.protobuf.StringValue display = 8;

  // OPTIONAL. Space delimited, case sensitive list of ASCII string values that
  // specifies whether the Authorization Server prompts the End-User for
  // reauthentication and consent.
  google.protobuf.StringValue prompt = 9;

  // OPTIONAL. Maximum Authentication Age. Specifies the allowable elapsed time
  // in seconds since the last time the End-User was actively authenticated by
  // the OP. If the elapsed time is greater than this value, the OP MUST attempt
  // to actively re-authenticate the End-User. (The max_age request parameter
  // corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request
  // parameter.) When max_age is used, the ID Token returned MUST include an
  // auth_time Claim Value.
  google.protobuf.UInt64Value max_age = 10;

  // OPTIONAL. End-User's preferred languages and scripts for the user
  // interface, represented as a space-separated list of BCP47 [RFC5646]
  // language tag values, ordered by preference. For instance, the value "fr-CA
  // fr en" represents a preference for French as spoken in Canada, then French
  // (without a region designation), followed by English (without a region
  // designation). An error SHOULD NOT result if some or all of the requested
  // locales are not supported by the OpenID Provider.
  google.protobuf.StringValue ui_locales = 11;

  // OPTIONAL. ID Token previously issued by the Authorization Server being
  // passed as a hint about the End-User's current or past authenticated session
  // with the Client. If the End-User identified by the ID Token is logged in or
  // is logged in by the request, then the Authorization Server returns a
  // positive response; otherwise, it SHOULD return an error, such as
  // login_required. When possible, an id_token_hint SHOULD be present when
  // prompt=none is used and an invalid_request error MAY be returned if it is
  // not; however, the server SHOULD respond successfully when possible, even
  // if it is not present. The Authorization Server need not be listed as an
  // audience of the ID Token when it is used as an id_token_hint value.
  // If the ID Token received by the RP from the OP is encrypted, to use it as
  // an id_token_hint, the Client MUST decrypt the signed ID Token contained
  // within the encrypted ID Token. The Client MAY re-encrypt the signed ID
  // token to the Authentication Server using a key that enables the server to
  // decrypt the ID Token, and use the re-encrypted ID token as the
  // id_token_hint value.
  google.protobuf.StringValue id_token_hint = 12;

  // OPTIONAL. Requested Authentication Context Class Reference values.
  // Space-separated string that specifies the acr values that the Authorization
  // Server is being requested to use for processing this Authentication
  // Request, with the values appearing in order of preference. The
  // Authentication Context Class satisfied by the authentication performed is
  // returned as the acr Claim Value, as specified in Section 2. The acr Claim
  // is requested as a Voluntary Claim by this parameter.
  google.protobuf.StringValue acr_values = 13;

  // OPTIONAL. This parameter enables OpenID Connect requests to be passed in a
  // single, self-contained parameter and to be optionally signed and/or
  // encrypted. The parameter value is a Request Object value, as specified in
  // Section 6.1. It represents the request as a JWT whose Claims are the
  // request parameters.
  google.protobuf.StringValue request = 14;

  // OPTIONAL. This parameter enables OpenID Connect requests to be passed by
  // reference, rather than by value. The request_uri value is a URL using the
  // https scheme referencing a resource containing a Request Object value,
  // which is a JWT containing the request parameters.
  google.protobuf.StringValue request_uri = 15;

  // REQUIRED. This parameter enables PKCE flow.
  string code_challenge = 16;

  // REQUIRED. This parameter enables PKCE flow.
  string code_challenge_method = 17;

  // REQUIRED. Add targeted audience.
  string audience = 18;

  // OPTIONAL.
  // https://tools.ietf.org/html/draft-fett-oauth-dpop-04#section-5
  string dpop_proof = 19;
}

// https://www.rfc-editor.org/rfc/rfc6749.html#section-4.1.2
message AuthorizationResponse {
  Error error = 1;
  // REQUIRED.  The authorization code generated by the
  // authorization server.  The authorization code MUST expire
  // shortly after it is issued to mitigate the risk of leaks.  A
  // maximum authorization code lifetime of 10 minutes is
  // RECOMMENDED.  The client MUST NOT use the authorization code
  // more than once.  If an authorization code is used more than
  // once, the authorization server MUST deny the request and SHOULD
  // revoke (when possible) all tokens previously issued based on
  // that authorization code.  The authorization code is bound to
  // the client identifier and redirection URI.
  string code = 2;

  // REQUIRED if the "state" parameter was present in the client
  // authorization request.  The exact value received from the
  // client.
  string state = 3;
}

message RegistrationRequest {
  // REQUIRED. Client that requests the authorization requests registration.
  Client client = 1;

  // REQUIRED. The request to register.
  AuthorizationRequest request = 2;
}

message RegistrationResponse {
  Error error = 1;
  // https://tools.ietf.org/html/draft-lodderstedt-oauth-par-01#section-2.2

  // The request URI corresponding to the authorization
  // request posted.  This URI is used as reference to the respective
  // request data in the subsequent authorization request only.  The
  // way the authorization process obtains the authorization request
  // data is at the discretion of the authorization server and out of
  // scope of this specification.  There is no need to make the
  // authorization request data available to other parties via this
  // URI.
  string request_uri = 2;

  // A JSON number that represents the lifetime of the
  // request URI in seconds.  The request URI lifetime is at the
  // discretion of the AS.
  fixed64 expires_in = 3;
}

message TokenRequest {
  // REQUIRED. The client that request token generation.
  Client client = 1;

  // REQUIRED. The grant_type value to use.
  string grant_type = 2;

  // OPTIONAL. Scope to use for token request
  google.protobuf.StringValue scope = 3;

  // REQUIRED.
  oneof grant {
    // tools.ietf.org/html/rfc6749#section-1.3.1
    GrantAuthorizationCode authorization_code = 10;
    // tools.ietf.org/html/rfc6749#section-4.4
    GrantClientCredentials client_credentials = 11;
    // tools.ietf.org/html/rfc8628#section-3.4
    GrantDeviceCode device_code = 12;
    // tools.ietf.org/html/rfc6749#section-1.5
    GrantRefreshToken refresh_token = 13;
  }
}

message TokenResponse {
  Error error = 1;
  // REQUIRED. Access token information used to generate the final one.
  Token access_token = 2;
  // OPTIONAL. Refresh token information used to generate the final one.
  Token refresh_token = 3;
  // OPTIONAL. ID Token information.
  Token id_token = 4;
}
